{
  "_args": [
    [
      {
        "raw": "babel-plugin-css-modules-transform@https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
        "scope": null,
        "escapedName": "babel-plugin-css-modules-transform",
        "name": "babel-plugin-css-modules-transform",
        "rawSpec": "https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
        "spec": "https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
        "type": "remote"
      },
      "/home/pil0t/Projects/powr_x"
    ]
  ],
  "_from": "babel-plugin-css-modules-transform@>=1.2.0 <2.0.0",
  "_id": "babel-plugin-css-modules-transform@1.2.0",
  "_inCache": true,
  "_location": "/babel-plugin-css-modules-transform",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-css-modules-transform@https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
    "scope": null,
    "escapedName": "babel-plugin-css-modules-transform",
    "name": "babel-plugin-css-modules-transform",
    "rawSpec": "https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
    "spec": "https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
  "_shasum": "6944c2265740eed74a63b4a003af427f1834821e",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-css-modules-transform@https://registry.npmjs.org/babel-plugin-css-modules-transform/-/babel-plugin-css-modules-transform-1.2.0.tgz",
  "_where": "/home/pil0t/Projects/powr_x",
  "author": {
    "name": "Michal Kvasničák",
    "email": "michal.kvasnicak@gmail.com",
    "url": "http://kvasnicak.info"
  },
  "bugs": {
    "url": "https://github.com/michalkvasnicak/babel-plugin-css-modules-transform/issues"
  },
  "dependencies": {
    "css-modules-require-hook": "^4.0.3",
    "mkdirp": "^0.5.1"
  },
  "description": "Transform required css modules so one can use generated class names.",
  "devDependencies": {
    "babel-cli": "^6.22.2",
    "babel-core": "^6.22.1",
    "babel-eslint": "^7.1.1",
    "babel-plugin-transform-es2015-block-scoping": "^6.22.0",
    "babel-plugin-transform-es2015-destructuring": "^6.22.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.22.0",
    "babel-plugin-transform-es2015-parameters": "^6.22.0",
    "babel-plugin-transform-es2015-spread": "^6.22.0",
    "babel-plugin-transform-export-extensions": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.22.0",
    "babel-plugin-transform-strict-mode": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "chai": "^3.4.1",
    "eslint": "^1.9.0",
    "eslint-config-airbnb-lite": "^1.0.0",
    "gulp-babel": "^6.1.2",
    "gulp-util": "^3.0.7",
    "mocha": "^2.3.4",
    "postcss": "^5.x",
    "postcss-modules-extract-imports": "^1.x",
    "postcss-modules-local-by-default": "^1.x",
    "postcss-modules-scope": "^1.x",
    "postcss-modules-values": "^1.x",
    "rimraf": "^2.5.4"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/michalkvasnicak/babel-plugin-css-modules-transform#readme",
  "keywords": [
    "babel",
    "css-modules",
    "babel-plugin",
    "plugin"
  ],
  "license": "MIT",
  "main": "build/index.js",
  "name": "babel-plugin-css-modules-transform",
  "optionalDependencies": {},
  "readme": "# babel-plugin-css-modules-transform [Babel 6 only]\n\n[![Circle CI](https://circleci.com/gh/michalkvasnicak/babel-plugin-css-modules-transform.svg?style=svg)](https://circleci.com/gh/michalkvasnicak/babel-plugin-css-modules-transform)\n\nThis Babel plugin finds all `require`s for css module files and replace them with a hash where keys are class names and values are generated css class names.\n\nThis plugin is based on the fantastic [css-modules-require-hook](https://github.com/css-modules/css-modules-require-hook).\n\n## Warning\n\nThis plugin is experimental, pull requests are welcome.\n\n**Do not run this plugin as part of webpack frontend configuration. This plugin is intended only for backend compilation.**\n\n## Example\n\n```css\n/* test.css */\n\n.someClass {\n    color: red;\n}\n```\n\n```js\n// component.js\nconst styles = require('./test.css');\n\nconsole.log(styles.someClass);\n\n// transformed file\nconst styles = {\n    'someClass': 'Test__someClass___2Frqu'\n}\n\nconsole.log(styles.someClass); // prints Test__someClass___2Frqu\n```\n\n## Installation\n\n```\nnpm install --save-dev babel-plugin-css-modules-transform\n```\n\n**Include plugin in `.babelrc`**\n\n```json\n{\n    \"plugins\": [\"css-modules-transform\"]\n}\n```\n\n**With custom options [css-modules-require-hook options](https://github.com/css-modules/css-modules-require-hook#tuning-options)**\n\n\n```js\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"append\": [\n                    \"npm-module-name\",\n                    \"./path/to/module-exporting-a-function.js\"\n                ],\n                \"camelCase\": false,\n                \"createImportedName\": \"npm-module-name\",\n                \"createImportedName\": \"./path/to/module-exporting-a-function.js\",\n                \"devMode\": false,\n                \"extensions\": [\".css\", \".scss\", \".less\"], // list extensions to process; defaults to .css\n                \"generateScopedName\": \"[name]__[local]___[hash:base64:5]\", // in case you don't want to use a function\n                \"generateScopedName\": \"./path/to/module-exporting-a-function.js\", // in case you want to use a function\n                \"generateScopedName\": \"npm-module-name\",\n                \"hashPrefix\": \"string\",\n                \"ignore\": \"*css\",\n                \"ignore\": \"./path/to/module-exporting-a-function-or-regexp.js\",\n                \"preprocessCss\": \"./path/to/module-exporting-a-function.js\",\n                \"preprocessCss\": \"npm-module-name\",\n                \"processCss\": \"./path/to/module-exporting-a-function.js\",\n                \"processCss\": \"npm-module-name\",\n                \"processOpts\": \"npm-module-name\",\n                \"processOpts\": \"./path/to/module/exporting-a-plain-object.js\",\n                \"mode\": \"string\",\n                \"prepend\": [\n                    \"npm-module-name\",\n                    \"./path/to/module-exporting-a-function.js\"\n                ],\n                \"extractCss\": \"./dist/stylesheets/combined.css\"\n            }\n        ]\n    ]\n}\n```\n\n## Using a preprocessor\n\nWhen using this plugin with a preprocessor, you'll need to configure it as such:\n\n\n```\n// ./path/to/module-exporting-a-function.js\nvar sass = require('node-sass');\nvar path = require('path');\n\nmodule.exports = function processSass(data, filename) {\n    var result;\n    result = sass.renderSync({\n        data: data,\n        file: filename\n    }).css;\n    return result.toString('utf8');\n};\n```\n\nand then add any relevant extensions to your plugin config:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"preprocessCss\": \"./path/to/module-exporting-a-function.js\",\n                \"extensions\": [\".css\", \".scss\"]\n            }\n        ]\n    ]\n}\n\n```\n\n## Extract CSS Files\n\nWhen you publish a library, you might want to ship compiled css files as well to\nhelp integration in other projects.\n\nAn more complete alternative is to use\n[babel-plugin-webpack-loaders](https://github.com/istarkov/babel-plugin-webpack-loaders)\nbut be aware that a new webpack instance is run for each css file, this has a\nhuge overhead. If you do not use fancy stuff, you might consider using\n[babel-plugin-css-modules-transform](https://github.com/michalkvasnicak/babel-plugin-css-modules-transform)\ninstead.\n\n\nTo combine all css files in a single file, give its name:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"extractCss\": \"./dist/stylesheets/combined.css\"\n            }\n        ]\n    ]\n}\n```\n\nTo extract all files in a single directory, give an object:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"extractCss\": {\n                    \"dir\": \"./dist/stylesheets/\",\n                    \"relativeRoot\": \"./src/\",\n                    \"filename\": \"[path]/[name].css\"\n                }\n            }\n        ]\n    ]\n}\n```\n\nNote that `relativeRoot` is used to resolve relative directory names, available\nas `[path]` in `filename` pattern.\n\n## Using a `babel-register`\n\nMake sure you set `ignore` option of `babel-register` to ignore all files used by css-modules-require-hook to process your css files.\n\n**Require `babel-register` only once otherwise it will fail**\n**Be aware, you need to explicitly ignore `node_modules` if you set `ignore` option**\n\n```js\nrequire('babel-register')({\n    ignore: /(processCss\\.js|node_modules)/ // regex matching all files used by css-modules-require-hook to process your css files\n})\n```\n\n## Using in mocha\n\nCreate a js file with content\n\n**Be aware, you need to explicitly ignore `node_modules` if you set `ignore` option**\n\n```js\nrequire('babel-register')({\n    ignore: /(processCss\\.js|node_modules)/ // regex matching all files used by css-modules-require-hook to process your css files\n})\n```\n\nand then set this file as a compiler `--compilers js:<name-of-your-file>.js`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/michalkvasnicak/babel-plugin-css-modules-transform.git"
  },
  "scripts": {
    "build": "node node_modules/.bin/babel src --ignore **/*.spec.js -d build",
    "lint": "node node_modules/.bin/eslint src",
    "test": "npm run lint && node node_modules/.bin/mocha --compilers js:babel-core/register 'test/**/*.spec.js'"
  },
  "version": "1.2.0"
}
